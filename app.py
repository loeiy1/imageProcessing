import streamlit as st
from streamlit_extras.add_vertical_space import add_vertical_space
import cv2
import numpy as np
from PIL import Image
import io
import base64
import time
from streamlit_option_menu import option_menu
import os


# ุฅุนุฏุงุฏ ุตูุญุฉ Streamlit
st.set_page_config(
    page_title="ูุนุงูุฌุฉ ุงูุตูุฑ ุงูุชูุงุนููุฉ",
    page_icon="๐ผ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ุดุนุงุฑ ุฃุนูู ุงูุตูุญุฉ ุจุดูู ูุฎู
st.markdown("""
<link href="https://fonts.googleapis.com/css2?family=Cairo:wght@700&family=Tajawal:wght@500;700&display=swap" rel="stylesheet">
<style>
    .stApp {
        background: linear-gradient(120deg, #f8fafc 0%, #e0f7fa 100%);
        min-height: 100vh;
    }
    h1 {
        color: #1976d2;
        text-align: center;
        font-weight: 700;
        font-family: 'Cairo', 'Tajawal', Arial, sans-serif;
        font-size: 2.7rem;
        margin-top: 10px;
        margin-bottom: 0px;
        letter-spacing: 2px;
        text-shadow: 0 2px 8px #bbdefb;
    }
    h2, h3, h4 {
        color: #388e3c;
        font-family: 'Tajawal', 'Cairo', Arial, sans-serif;
        font-weight: 700;
        text-shadow: 0 1px 4px #c8e6c9;
    }
    body, .stApp, .stMarkdown, .stText, .stExpander, .stButton>button, .stCheckbox>label, .stTextInput>label {
        color: #111 !important;
        font-family: 'Tajawal', 'Cairo', Arial, sans-serif;
        font-size: 1.1rem;
    }
    .stButton>button {
        background: linear-gradient(90deg, #ff9800 0%, #1976d2 100%);
        color: #fff;
        border: none;
        padding: 14px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 18px;
        margin: 12px 0px;
        cursor: pointer;
        border-radius: 16px;
        transition: background 0.3s, box-shadow 0.3s;
        box-shadow: 0 4px 16px rgba(38,166,154,0.12);
        font-family: 'Cairo', 'Tajawal', Arial, sans-serif;
        position: relative;
        right: 0;
        left: auto;
        float: right;
        clear: both;
    }
    .stButton>button:hover {
        background: linear-gradient(90deg, #f57c00 0%, #1565c0 100%);
        box-shadow: 0 6px 24px rgba(38,166,154,0.18);
    }
    .stSlider>div>div>div {
        background: #1976d2;
    }
    .stCheckbox>label {
        color: #388e3c;
        font-weight: bold;
        font-size: 1.1rem;
    }
    .stTextInput>label {
        color: #1976d2;
        font-weight: bold;
        font-size: 1.1rem;
    }
    .streamlit-expanderHeader {
        background-color: #bbdefb;
        color: #1976d2;
        font-weight: bold;
        font-size: 1.1rem;
        border-radius: 8px;
        padding: 8px 16px;
    }
    .camera-container {
        border: 2px solid #1976d2;
        border-radius: 16px;
        padding: 18px;
        margin-bottom: 24px;
        background: linear-gradient(120deg, #e3f2fd 0%, #e8f5e9 100%);
        box-shadow: 0 2px 12px rgba(38,166,154,0.08);
    }
    .stImage>img {
        border-radius: 16px;
        box-shadow: 0 2px 12px #bbdefb;
        margin-bottom: 8px;
    }
    .stSidebar {
        background: linear-gradient(120deg, #bbdefb 0%, #c8e6c9 100%);
        border-radius: 0 16px 16px 0;
        box-shadow: 2px 0 12px #bbdefb;
    }
    .stMarkdown ul {
        background: #e3f2fd;
        border-radius: 8px;
        padding: 12px 18px;
        box-shadow: 0 1px 6px #bbdefb;
    }
    .stMarkdown li {
        margin-bottom: 8px;
        font-size: 1.1rem;
    }
</style>
<div style='text-align:center; margin-bottom:0px;'>
    <img src='https://i.imgur.com/2yaf2wb.png' width='120' style='margin-bottom:10px; box-shadow:0 2px 12px #bbdefb; border-radius:50%;'>
    <h1>๐ผ ูุนุงูุฌุฉ ุงูุตูุฑ ุงูุชูุงุนููุฉ</h1>
</div>
""", unsafe_allow_html=True)
st.markdown("<hr style='border:1px solid #1976d2; margin-top:0px; margin-bottom:16px;'>", unsafe_allow_html=True)

# ุชุนุฑูู ููุฑุฉ ุงููุดุฑูุน ูู ุฃุนูู ุงูุตูุญุฉ
st.markdown("""
<div style='background:linear-gradient(90deg,#e0f7fa 0%,#b2dfdb 100%);border-radius:16px;padding:18px 24px;margin-bottom:18px;box-shadow:0 2px 8px #b2dfdb;'>
    <h2 style='color:#1976d2;margin-bottom:8px;'>ูุดุฑูุน: ุณูุณูุฉ ูุญุงุถุฑุงุช ุชูุงุนููุฉ ูู ูุนุงูุฌุฉ ุงูุตูุฑ (Streamlit)</h2>
    <p style='color:#222;font-size:1.1rem;font-weight:bold;'>
    ููุฑุฉ ุงููุดุฑูุน:<br>
    ุจูุงุก ุชุทุจูู ุชุนูููู ุจุงุณุชุฎุฏุงู Streamlit ูุดุฑุญ ุฃูู ุนูููุงุช ูุนุงูุฌุฉ ุงูุตูุฑ.<br>
    ูู ูุญุงุถุฑุฉ ุชุชูููู ูู ุดุฑุญ ูุธุฑู ูุฎุชุตุฑ ูุชุฌุฑุจุฉ ุนูููุฉ ุจุงูุฃุฏูุงุช.<br>
    ุงููุณุชุฎุฏู ูุง ููุชุจ ููุฏุ ููุท ูุชูุงุนู ูุน ุฃุฒุฑุงุฑ ูููุงุฆู ูููุฒููุงุช.<br>
    ุงููุญุงูุฑ ุงูููุงุฆูุฉ:
    </p>
    <ul style='color:#222;font-size:1.05rem;'>
        <li>ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ ุงูุฑูููุฉ: ุฑูุน ุตูุฑุฉุ ุนุฑุถ ูุนูููุงุช ุงูุตูุฑุฉ.</li>
        <li>ุฃูุธูุฉ ุงูุฃููุงู: ุงูุชุญููู ุจูู RGB/Gray/HSVุ ุชูุณูู ุงููููุงุช.</li>
        <li>ุงูุนูููุงุช ุนูู ุงูุจูุณู: ุชุนุฏูู ุงูุณุทูุน/ุงูุชุจุงููุ ุงูุตูุฑ ุงูุณุงูุจุฉุ Thresholding.</li>
        <li>ุงูููุงุชุฑ ูุงูุงูุชูุงู: ุงุฎุชูุงุฑ ููุน ุงูููุชุฑุ ุงูุชุญูู ุจุญุฌู Kernelุ ููุงุฑูุฉ ูุจู/ุจุนุฏ.</li>
        <li>ุฅุฒุงูุฉ ุงูุถูุถุงุก: ุฅุถุงูุฉ ุถูุถุงุกุ ุชุทุจูู Median/Bilateral Filtering.</li>
        <li>ูุดู ุงูุญูุงู: ุงุฎุชูุงุฑ ููุน ูุดู ุงูุญุงูุฉุ ุงูุชุญูู ุจุงูุนุชุจุงุชุ ุนุฑุถ ูุจู/ุจุนุฏ.</li>
        <li>ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ: ุชุญููู ุฅูู ุซูุงุฆูุ ุชุทุจูู ุนูููุงุช ููุฑููููุฌูุฉ.</li>
        <li>ุงูุชุญูููุงุช ุงูููุฏุณูุฉ: ุชุฏููุฑุ ุชูุจูุฑ/ุชุตุบูุฑุ ุงูุนูุงุณุ ูุต ุฌุฒุก ูู ุงูุตูุฑุฉ.</li>
        <li>ูุดุฑูุน ุฎุชุงูู: ุณูุณูุฉ ุนูููุงุช ุชูุงุนููุฉุ ุญูุธ ุงูุตูุฑุฉ ุงูููุงุฆูุฉ.</li>
    </ul>
    <p style='color:#1976d2;font-size:1.05rem;font-weight:bold;'>ุงูุฃุฏูุงุช ุงููุทููุจุฉ: Pythonุ Streamlitุ OpenCVุ NumPy</p>
</div>
""", unsafe_allow_html=True)

# ุชุฎุตูุต ุงูุชุตููู ุจุงุณุชุฎุฏุงู CSS ูุฏูุฌ

st.markdown("""
<style>
    .stApp {
        background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
    }
    h1 {
        color: #2e7d32;
        text-align: center;
        font-weight: bold;
        letter-spacing: 2px;
        font-family: 'Cairo', 'Tajawal', Arial, sans-serif;
    }
    h2, h3, h4 {
        color: #388e3c;
        font-family: 'Cairo', 'Tajawal', Arial, sans-serif;
    }
    body, .stApp, .stMarkdown, .stText, .stExpander, .stButton>button, .stCheckbox>label, .stTextInput>label {
        color: #111 !important;
        font-family: 'Cairo', 'Tajawal', Arial, sans-serif;
    }
    .stButton>button {
        background: linear-gradient(90deg, #43a047 0%, #81c784 100%);
        color: white;
        border: none;
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 8px;
        transition: background 0.3s;
        box-shadow: 0 2px 8px rgba(67,160,71,0.08);
    }
    .stButton>button:hover {
        background: linear-gradient(90deg, #388e3c 0%, #66bb6a 100%);
    }
    .stSlider>div>div>div {
        background: #43a047;
    }
    .stCheckbox>label {
        color: #388e3c;
        font-weight: bold;
    }
    .stTextInput>label {
        color: #388e3c;
        font-weight: bold;
    }
    .streamlit-expanderHeader {
        background-color: #c8e6c9;
        color: #388e3c;
        font-weight: bold;
    }
    .camera-container {
        border: 2px solid #1976d2;
        border-radius: 16px;
        padding: 18px;
        margin-bottom: 24px;
        background: linear-gradient(120deg, #e3f2fd 0%, #e8f5e9 100%);
        box-shadow: 0 2px 12px rgba(38,166,154,0.08);
    }
    .stImage>img {
        border-radius: 16px;
        box-shadow: 0 2px 12px #bbdefb;
        margin-bottom: 8px;
    }
    .stSidebar {
        background: linear-gradient(120deg, #bbdefb 0%, #c8e6c9 100%);
        border-radius: 0 16px 16px 0;
        box-shadow: 2px 0 12px #bbdefb;
    }
    .stMarkdown ul {
        background: #e3f2fd;
        border-radius: 8px;
        padding: 12px 18px;
        box-shadow: 0 1px 6px #bbdefb;
    }
    .stMarkdown li {
        margin-bottom: 8px;
        font-size: 1.1rem;
    }
</style>
""", unsafe_allow_html=True)

# ุนููุงู ุงูุชุทุจูู
st.title("๐ผ ูุนุงูุฌุฉ ุงูุตูุฑ ุงูุชูุงุนููุฉ")
st.markdown("---")


# ุดุฑูุท ุฌุงูุจู ููุชููู ุจูู ุงููุญุฏุงุช + ุตูุญุฉ ุญูู ุงูุชุทุจูู ูุฒุฑ ุฅุนุงุฏุฉ ุชุนููู
with st.sidebar:
    selected = option_menu(
        menu_title="ุงููุญุฏุงุช ุงูุชุนููููุฉ",
        options=[
            "ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ",
            "ุฃูุธูุฉ ุงูุฃููุงู",
            "ุงูุนูููุงุช ุนูู ุงูุจูุณู",
            "ุงูููุงุชุฑ ูุงูุงูุชูุงู",
            "ุฅุฒุงูุฉ ุงูุถูุถุงุก",
            "ูุดู ุงูุญูุงู",
            "ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ",
            "ุงูุชุญูููุงุช ุงูููุฏุณูุฉ",
            "ุงููุนุงูุฌุฉ ุงููุจุงุดุฑุฉ ุจุงููุงููุฑุง",
            "ุงููุดุฑูุน ุงูุฎุชุงูู",
            "ุญูู ุงูุชุทุจูู"
        ],
        icons=[
            "house",
            "palette",
            "sliders",
            "filter",
            "ear",
            "vector-pen",
            "circle",
            "arrow-left-right",
            "camera",
            "code",
            "info-circle"
        ],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"padding": "5px", "background": "linear-gradient(120deg, #e3f2fd 0%, #e8f5e9 100%)", "border-radius": "0 16px 16px 0"},
            "icon": {"color": "#ff9800", "font-size": "22px"},
            "nav-link": {"font-size": "18px", "text-align": "right", "margin": "0px", "color": "#222", "font-weight": "bold"},
            "nav-link-selected": {"background": "linear-gradient(90deg, #43a047 0%, #1976d2 100%)", "color": "#fff", "font-weight": "bold", "box-shadow": "0 2px 8px #b2dfdb"},
            "menu-title": {"color": "#1976d2", "font-size": "20px", "font-weight": "bold"}
        }
    )
    st.markdown("---")
    if st.button("๐ ุฅุนุงุฏุฉ ุชุนููู ุงูุฎูุงุฑุงุช"):
        st.session_state.clear()
        st.experimental_rerun()
    st.markdown("---")
    st.markdown("""
    <div style='font-size:14px; color:#2E7D32;'>
    <b>ุทูุฑ ุจูุงุณุทุฉ:</b> GitHub Copilot<br>
    <b>ููุชูุงุตู:</b> mjlo@example.com
    </div>
    """, unsafe_allow_html=True)

# ูุธููุฉ ูุชุญููู ุงูุตูุฑุฉ
def load_image():
    # ุฎูุงุฑุงุช ุชุญููู ุงูุตูุฑุฉ
    option = st.radio("ุงุฎุชุฑ ุทุฑููุฉ ุชุญููู ุงูุตูุฑุฉ:", ("ุฑูุน ุตูุฑุฉ", "ุงุณุชุฎุฏุงู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"))
    
    img = None
    if option == "ุฑูุน ุตูุฑุฉ":
        uploaded_file = st.file_uploader("ุงุฎุชุฑ ุตูุฑุฉ", type=['jpg', 'jpeg', 'png'])
        if uploaded_file is not None:
            img = Image.open(uploaded_file)
            st.success("ุชู ุชุญููู ุงูุตูุฑุฉ ุจูุฌุงุญ!")
    
    else:  # ุตูุฑุฉ ุงูุชุฑุงุถูุฉ
        default_option = st.selectbox("ุงุฎุชุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ:", 
                                    ("ูููุง", "ุจุงุจูู", "ููุธุฑ ุทุจูุนู"))
        
        if default_option == "ูููุง":
            # ุฅูุดุงุก ุตูุฑุฉ ูููุง ุงูุชุฑุงุถูุฉ (ุดุจูุฉ ุฃููุงู)
            img_array = np.zeros((512, 512, 3), dtype=np.uint8)
            cv2.rectangle(img_array, (0, 0), (256, 256), (255, 0, 0), -1)  # ุฃุญูุฑ
            cv2.rectangle(img_array, (256, 0), (512, 256), (0, 255, 0), -1)  # ุฃุฎุถุฑ
            cv2.rectangle(img_array, (0, 256), (256, 512), (0, 0, 255), -1)  # ุฃุฒุฑู
            cv2.rectangle(img_array, (256, 256), (512, 512), (255, 255, 255), -1)  # ุฃุจูุถ
            img = Image.fromarray(img_array)
            
        elif default_option == "ุจุงุจูู":
            # ุฅูุดุงุก ุตูุฑุฉ ุจุงุจูู ุงูุชุฑุงุถูุฉ (ุชุฏุฑุฌ ุฑูุงุฏู)
            img_array = np.zeros((512, 512), dtype=np.uint8)
            for i in range(512):
                img_array[i, :] = i // 2
            img = Image.fromarray(img_array)
            
        else:
            # ุฅูุดุงุก ููุธุฑ ุทุจูุนู ุงูุชุฑุงุถู (ุชุฏุฑุฌ ุฃููุงู)
            img_array = np.zeros((512, 512, 3), dtype=np.uint8)
            for i in range(512):
                # ุณูุงุก ุฒุฑูุงุก
                img_array[i, :, 0] = 255 - i // 2  # ุฃุฒุฑู
                img_array[i, :, 1] = 200 - i // 3  # ุฃุฎุถุฑ
                img_array[i, :, 2] = 150 - i // 4  # ุฃุญูุฑ
                
                # ุฃุฑุถ ุฎุถุฑุงุก
                if i > 400:
                    img_array[i, :, 0] = 50  # ุฃุฒุฑู
                    img_array[i, :, 1] = 200  # ุฃุฎุถุฑ
                    img_array[i, :, 2] = 50  # ุฃุญูุฑ
            img = Image.fromarray(img_array)
    
    return img

# ูุธููุฉ ูุนุฑุถ ูุนูููุงุช ุงูุตูุฑุฉ
def display_image_info(img):
    if img is not None:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("ุงูุตูุฑุฉ ุงูุฃุตููุฉ")
            st.image(img, use_column_width=True)
        
        with col2:
            st.subheader("ูุนูููุงุช ุงูุตูุฑุฉ")
            if isinstance(img, np.ndarray):
                if len(img.shape) == 3:
                    height, width, channels = img.shape
                    st.write(f"*ุงูุฃุจุนุงุฏ:* {width} ร {height} ุจูุณู")
                    st.write(f"*ุนุฏุฏ ุงููููุงุช:* {channels}")
                else:
                    height, width = img.shape
                    st.write(f"*ุงูุฃุจุนุงุฏ:* {width} ร {height} ุจูุณู")
                    st.write(f"*ุนุฏุฏ ุงููููุงุช:* 1 (ุชุฏุฑุฌ ุฑูุงุฏู)")
            else:
                st.write(f"*ุงูุฃุจุนุงุฏ:* {img.width} ร {img.height} ุจูุณู")
                st.write(f"*ุงููุถุน:* {img.mode}")


# ุฑุณุงูุฉ ุชูุถูุญูุฉ ุฃุนูู ุงูุตูุญุฉ: ุงููุณุชุฎุฏู ูุง ูุญุชุงุฌ ููุชุงุจุฉ ููุฏ
st.markdown("""
    <div style='background:#fff3e0;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;font-weight:bold;font-size:1.08rem;'>
    <span style='font-size:1.15rem;'>ูุฐุง ุงูุชุทุจูู ุชูุงุนูู ุจุงููุงููุ ูุง ุชุญุชุงุฌ ููุชุงุจุฉ ุฃู ููุฏ.<br>ููุท ุงุณุชุฎุฏู ุงูุฃุฒุฑุงุฑุ ุงูููุงุฆูุ ูุงูููุฒููุงุช ูุชุฌุฑุจุฉ ุงูุนูููุงุช ุจููุณู.</span>
    </div>
""", unsafe_allow_html=True)

# ุชุฎุตูุต ูุฑุจุน ุงููุนูููุงุช ููููู ุงููุต ุฏุงูู ููุงุถุญ
st.markdown("""
<style>
    .stAlert {
        background: linear-gradient(90deg, #e0f7fa 0%, #b2dfdb 100%) !important;
        color: #222 !important;
        font-weight: bold;
        font-size: 1.15rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px #b2dfdb;
        padding: 12px 24px !important;
    }
    .stInfo {
        color: #222 !important;
    }
</style>
""", unsafe_allow_html=True)

# ุชุฎุตูุต ูุฑุจุน st.info ููููู ุงููุต ุฃุณูุฏ ุฏุงุฆูุงู
st.markdown("""
<style>
    div[data-testid="stNotificationContent"], .stAlert, .stInfo, .stSuccess, .stWarning, .stError {
        color: #222 !important;
        font-weight: bold;
        font-size: 1.15rem;
    }
    .stMarkdown p {
        color: #222 !important;
    }
</style>
""", unsafe_allow_html=True)

# ุฑุณุงูุฉ ุชูุงุนููุฉ ุฃุนูู ูู ูุญุฏุฉ ุชุคูุฏ ุฃู ูู ุดูุก ุชูุงุนูู ููุง ูุญุชุงุฌ ุงููุณุชุฎุฏู ููุชุงุจุฉ ููุฏ
interactive_message = "<div style='background:#fff3e0;border-radius:8px;padding:8px 16px;margin-bottom:10px;color:#222;font-weight:bold;font-size:1.05rem;'>ูุฐุง ุงูุชุทุจูู ุชูุงุนูู ุจุงููุงููุ ูุง ุชุญุชุงุฌ ููุชุงุจุฉ ุฃู ููุฏ. ููุท ุงุณุชุฎุฏู ุงูุฃุฒุฑุงุฑ ูุงูููุงุฆู ูุงูููุฒููุงุช ูุชุฌุฑุจุฉ ุงูุนูููุงุช ุจููุณู.</div>"

# ุดุฑุญ ูุธุฑู ูุฎุชุตุฑ ููู ูุญุฏุฉ (4-6 ุฃุณุทุฑ)
theory_summaries = {
    "ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ": "ุงูุตูุฑุฉ ุงูุฑูููุฉ ุนุจุงุฑุฉ ุนู ุดุจูุฉ ูู ุงูุจูุณูุงุชุ ูู ุจูุณู ูุญูู ูููุฉ ููููุฉ. ุงูุฃุจุนุงุฏ ุชุญุฏุฏ ุนุฏุฏ ุงูุจูุณูุงุชุ ูุงููููุงุช ุชุญุฏุฏ ููููุงุช ุงูููู (ูุซู RGB). ุงูุนูู ุงููููู ูุญุฏุฏ ุนุฏุฏ ุงูุฃููุงู ุงูููููุฉ. ุงูุตูุฑ ุงูุฑูููุฉ ุชูุณุชุฎุฏู ูู ุงูุนุฏูุฏ ูู ุงูุชุทุจููุงุช ูุซู ุงูุชุตููุฑ ุงูุทุจูุ ุงูุฐูุงุก ุงูุงุตุทูุงุนูุ ูุงูุฃูู. ูููุง ุฒุงุฏุช ุงูุฏูุฉ ูุงูุนูู ุงูููููุ ุฒุงุฏุช ุฌูุฏุฉ ุงูุตูุฑุฉ ูุญุฌููุง. ููู ูุฐู ุงูุฃุณุงุณูุงุช ุถุฑูุฑู ูุฃู ูุนุงูุฌุฉ ุตูุฑ.",
    "ุฃูุธูุฉ ุงูุฃููุงู": "ุฃูุธูุฉ ุงูุฃููุงู ูู ุทุฑู ูุฎุชููุฉ ูุชูุซูู ุงูุฃููุงู ูู ุงูุตูุฑ. RGB ูู ุงูุฃูุซุฑ ุดููุนุงู ูู ุงูุดุงุดุงุชุ ุจูููุง BGR ููุณุชุฎุฏู ูู OpenCV. Grayscale ูุจุณุท ุงููุนุงูุฌุฉ ููููู ุญุฌู ุงูุจูุงูุงุช. HSV ููุตู ุจูู ุงูููู ูุงูุณุทูุนุ ููุง ูุณูู ูุนุงูุฌุฉ ุงูุฃููุงู. ุงุฎุชูุงุฑ ุงููุธุงู ุงูููุงุณุจ ูุนุชูุฏ ุนูู ููุน ุงููุนุงูุฌุฉ ุงููุทููุจุฉ.",
    "ุงูุนูููุงุช ุนูู ุงูุจูุณู": "ุชุดูู ุงูุนูููุงุช ุนูู ุงูุจูุณู ุชุนุฏูู ุงูุณุทูุน ูุงูุชุจุงููุ ูุนูุณ ุงูุฃููุงูุ ูุชุทุจูู ุงูุนุชุจุฉ ูุชุญููู ุงูุตูุฑุฉ ุฅูู ุฃุจูุถ ูุฃุณูุฏ. ูุฐู ุงูุนูููุงุช ุชูุณุชุฎุฏู ูุชุญุณูู ุงูุตูุฑ ุฃู ุชุฌููุฒูุง ูููุนุงูุฌุฉ ุงููุชูุฏูุฉ. ูููู ุชุทุจูููุง ุนูู ูู ุจูุณู ุจุดูู ูููุตู. ููู ูุฐู ุงูุนูููุงุช ูุณุงุนุฏ ูู ุงูุชุญูู ุจุฌูุฏุฉ ุงูุตูุฑุฉ.",
    "ุงูููุงุชุฑ ูุงูุงูุชูุงู": "ุงูููุงุชุฑ ุชุณุชุฎุฏู ููุงุฉ ุตุบูุฑุฉ ูุชุทุจูู ุชุฃุซูุฑุงุช ูุซู ุงูุชูุนูู ุฃู ุงูุชุนุฒูุฒ ุฃู ูุดู ุงูุญูุงู. ุงูุงูุชูุงู ูู ุนูููุฉ ุฑูุงุถูุฉ ุชูุทุจู ุนูู ูู ุจูุณู ุจุงุณุชุฎุฏุงู ุงูููุงุฉ. ุงูููุงุชุฑ ุชุณุงุนุฏ ูู ุฅุฒุงูุฉ ุงูุถูุถุงุก ุฃู ุฅุจุฑุงุฒ ุงูุชูุงุตูู. ูููู ุงูุชุญูู ุจุญุฌู ุงูููุงุฉ ูููุน ุงูููุชุฑ ุญุณุจ ุงูุญุงุฌุฉ. ุงูููุงุฑูุฉ ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุงููููุชุฑุฉ ุชูุถุญ ุชุฃุซูุฑ ุงูููุชุฑ.",
    "ุฅุฒุงูุฉ ุงูุถูุถุงุก": "ุงูุถูุถุงุก ุชุคุซุฑ ุนูู ุฌูุฏุฉ ุงูุตูุฑ ูุชูุชุฌ ุนู ุนูุงูู ูุซู ุงูุฅุถุงุกุฉ ุฃู ุฃุฌูุฒุฉ ุงูุชุตููุฑ. ูููู ุฅุถุงูุฉ ุถูุถุงุก ููุตูุฑุฉ ูุงุณุชุฎุฏุงู ููุงุชุฑ ูุซู Median ุฃู Bilateral ูุฅุฒุงูุชูุง. ุฅุฒุงูุฉ ุงูุถูุถุงุก ุถุฑูุฑูุฉ ูุชุญุณูู ูุชุงุฆุฌ ุงููุนุงูุฌุฉ ุงููุงุญูุฉ. ุงูููุงุฑูุฉ ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุงููุนุฏูุฉ ุชูุถุญ ูุนุงููุฉ ุงูููุงุชุฑ.",
    "ูุดู ุงูุญูุงู": "ูุดู ุงูุญูุงู ูุญุฏุฏ ุงูุญุฏูุฏ ุจูู ุงูุฃุฌุณุงู ูู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุงุช ูุซู Sobel ูLaplacian ูCanny. ูุฐู ุงูุนูููุงุช ุชูุณุชุฎุฏู ูู ุงูุชุนุฑู ุนูู ุงูุฃุดูุงู ูุชุชุจุน ุงูุฃุฌุณุงู. ูููู ุงูุชุญูู ุจุงูุนุชุจุงุช ููุญุตูู ุนูู ูุชุงุฆุฌ ุฏูููุฉ. ุนุฑุถ ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุตูุฑุฉ ุงูุญูุงู ูุณุงุนุฏ ูู ููู ุชุฃุซูุฑ ุงูุนูููุฉ.",
    "ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ": "ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ ูุซู ุงูุชุขูู ูุงูุชูุณูุน ูุงููุชุญ ูุงูุฅุบูุงู ุชูุณุชุฎุฏู ููุนุงูุฌุฉ ุงูุตูุฑ ุงูุซูุงุฆูุฉ ูุชุญุณูููุง. ูุฐู ุงูุนูููุงุช ุชุนุชูุฏ ุนูู ุดูู ุงูููุงุฉ ูุชูุณุชุฎุฏู ูุฅุฒุงูุฉ ุงูุดูุงุฆุจ ุฃู ูุตู ุงูุฃุฌุณุงู. ููู ูุฐู ุงูุนูููุงุช ููู ูู ุชุทุจููุงุช ูุซู ุงูุชุนุฑู ุนูู ุงููุตูุต ุฃู ุงูุฃุฌุณุงู.",
    "ุงูุชุญูููุงุช ุงูููุฏุณูุฉ": "ุชุดูู ุงูุชุญูููุงุช ุงูููุฏุณูุฉ ุชุฏููุฑ ุงูุตูุฑุฉุ ุชูุจูุฑูุง ุฃู ุชุตุบูุฑูุงุ ุงูุนูุงุณูุง ุฃูููุงู ุฃู ุฑุฃุณูุงูุ ููุต ุฌุฒุก ูููุง. ูุฐู ุงูุนูููุงุช ุชูุณุชุฎุฏู ูุชุฌููุฒ ุงูุตูุฑ ุฃู ุชุนุฏูููุง ุญุณุจ ุงูุญุงุฌุฉ. ูููู ุงูุชุญูู ูู ูุนุงููุฑ ุงูุชุญููู ุจุณูููุฉ. ุงูููุงุฑูุฉ ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุงููุนุฏูุฉ ุชูุถุญ ุชุฃุซูุฑ ุงูุชุญููู.",
    "ุงููุดุฑูุน ุงูุฎุชุงูู": "ูู ุงููุดุฑูุน ุงูุฎุชุงูู ููููู ุฑูุน ุตูุฑุฉ ูุงุฎุชูุงุฑ ุณูุณูุฉ ูู ุงูุนูููุงุช (Pipeline) ูุซู ุชุญููู ุฅูู ุฑูุงุฏู ุซู ุชุทุจูู Blur ุซู ูุดู ุงูุญูุงู. ุงููุฏู ูู ุฏูุฌ ุนุฏุฉ ุชูููุงุช ููุนุงูุฌุฉ ุตูุฑุฉ ูุงุญุฏุฉ. ููููู ุญูุธ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ ูููุงุฑูุชูุง ูุน ุงูุฃุตู. ูุฐุง ุงููุดุฑูุน ูุฎุชุจุฑ ูููู ูุฌููุน ุงููุญุฏุงุช ุงูุณุงุจูุฉ."
}

# ุนุฑุถ ุงูุดุฑุญ ุงููุธุฑู ุงููุฎุชุตุฑ ุฃุนูู ูู ูุญุฏุฉ
if selected in theory_summaries:
    st.markdown(f"""
    <div style='background:#fffde7;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;font-size:1.05rem;'>
    <b>ุดุฑุญ ูุธุฑู ูุฎุชุตุฑ:</b><br>{theory_summaries[selected]}
    </div>
    """, unsafe_allow_html=True)

# ุงููุญุฏุฉ 1: ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ ุงูุฑูููุฉ
if selected == "ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ูุฏุฎู ููุนูุงุฑูุฉ ุงูุตูุฑ ุงูุฑูููุฉ")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูุตูุฑุฉ ุงูุฑูููุฉ ูู ุชูุซูู ูุฑุฆู ูููู ูู ุดุจูุฉ ูู ุงูุจูุณูุงุช. ูู ุจูุณู ูุญูู ูุนูููุงุช ุงููููุ ูุชุญุฏุฏ ุงูุฃุจุนุงุฏ ุนุฏุฏ ุงูุจูุณูุงุช ูู ุงูุนุฑุถ ูุงูุงุฑุชูุงุนุ ุจูููุง ุชุญุฏุฏ ุงููููุงุช ููููุงุช ุงูููู (ูุซู RGB). ุงูุนูู ุงููููู ูุญุฏุฏ ุนุฏุฏ ุงูุฃููุงู ุงูููููุฉ ููู ุจูุณู.<br>ูููุง ุฒุงุฏุช ุฏูุฉ ุงูุตูุฑุฉ ูุนูููุง ุงูููููุ ุฒุงุฏุช ุฌูุฏุชูุง ูุญุฌููุง.
    </div>
    """, unsafe_allow_html=True)
    # ุชุญููู ุงูุตูุฑุฉ
    img = load_image()
    st.session_state.img = img

    # ุนุฑุถ ูุนูููุงุช ุงูุตูุฑุฉ
    display_image_info(img)

    # ุฅุถุงูุฉ ูุณุงุญุฉ ุฑุฃุณูุฉ
    add_vertical_space(2)

    # ุฒุฑ ูุญูุธ ุงูุตูุฑุฉ
    if st.button("๐พ ุญูุธ ุงูุตูุฑุฉ"):
        if img is not None:
            # ุชุญููู ุงูุตูุฑุฉ ุฅูู ูุตูููุฉ NumPy
            if isinstance(img, Image.Image):
                img_array = np.array(img)
            else:
                img_array = img

            # ุชุฑููุฒ ุงูุตูุฑุฉ ุจุชูุณูู JPEG
            _, img_encoded = cv2.imencode('.jpg', img_array)

            # ุชุญููู ุงูุจูุงูุงุช ุงููุดูุฑุฉ ุฅูู ุณูุณูุฉ ุจุงูุชุงุช
            img_bytes = img_encoded.tobytes()

            # ุชุฑููุฒ ุจุงูุชุงุช ุงูุตูุฑุฉ ุฅูู Base64
            img_base64 = base64.b64encode(img_bytes).decode()

            # ุฅูุดุงุก ุฑุงุจุท ุชุญููู ุงูุตูุฑุฉ
            st.markdown(f"<a href='data:image/jpeg;base64,{img_base64}' download='image.jpg'>ุงุถุบุท ููุง ูุชุญููู ุงูุตูุฑุฉ</a>", unsafe_allow_html=True)
        else:
            st.warning("ูุฑุฌู ุชุญููู ุตูุฑุฉ ุฃููุงู.")

# ุงููุญุฏุฉ 2: ุฃูุธูุฉ ุงูุฃููุงู

elif selected == "ุฃูุธูุฉ ุงูุฃููุงู":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุฃูุธูุฉ ุงูุฃููุงู (Color Spaces)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุฃูุธูุฉ ุงูุฃููุงู ูุซู RGB ูBGR ูGrayscale ูHSV ูู ุทุฑู ูุฎุชููุฉ ูุชูุซูู ุงูุฃููุงู ูู ุงูุตูุฑ ุงูุฑูููุฉ. ูุณุชุฎุฏู RGB ูู ุงูุดุงุดุงุชุ ุจูููุง BGR ูู OpenCV. Grayscale ูุจุณุท ุงููุนุงูุฌุฉุ ูHSV ูููุฏ ููุตู ุงูุฃููุงู.<br>ููู ูุธุงู ุงุณุชุฎุฏุงูุงุชู ุญุณุจ ุงูุญุงุฌุฉ.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        if st.button("ุชุญููู ุฅูู HSV"):
            img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)
            img_hsv_rgb = cv2.cvtColor(img_hsv, cv2.COLOR_HSV2RGB)
            st.image(img_hsv_rgb, caption="ุจุนุฏ ุงูุนูููุฉ (HSV)", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 3: ุงูุนูููุงุช ุนูู ุงูุจูุณู

elif selected == "ุงูุนูููุงุช ุนูู ุงูุจูุณู":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุงูุนูููุงุช ุนูู ุงูุจูุณู (Point Operations)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูุนูููุงุช ุนูู ุงูุจูุณู ุชุดูู ุชุนุฏูู ุงูุณุทูุน ูุงูุชุจุงููุ ูุนูุณ ุงูุฃููุงู (ุงูุตูุฑุฉ ุงูุณุงูุจุฉ)ุ ูุชุทุจูู ุงูุนุชุจุฉ ูุชุญููู ุงูุตูุฑุฉ ุฅูู ุฃุจูุถ ูุฃุณูุฏ.<br>ูุฐู ุงูุนูููุงุช ุฃุณุงุณูุฉ ูุชุญุณูู ุงูุตูุฑ ูุชุฌููุฒูุง ูููุนุงูุฌุฉ ุงููุชูุฏูุฉ.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        brightness = st.slider("ุชุนุฏูู ุงูุณุทูุน:", -100, 100, 0)
        contrast = st.slider("ุชุนุฏูู ุงูุชุจุงูู:", -100, 100, 0)

        if st.button("ุชุทุจูู"):
            # ุชุนุฏูู ุงูุณุทูุน ูุงูุชุจุงูู
            img_bright_contrast = cv2.convertScaleAbs(img_bgr, alpha=contrast/100+1, beta=brightness)
            st.image(img_bright_contrast, caption="ุจุนุฏ ุงูุนูููุฉ (ุชุนุฏูู ุงูุณุทูุน ูุงูุชุจุงูู)", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 4: ุงูููุงุชุฑ ูุงูุงูุชูุงู

elif selected == "ุงูููุงุชุฑ ูุงูุงูุชูุงู":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุงูููุงุชุฑ ูุงูุงูุชูุงู (Filtering & Convolution)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูููุงุชุฑ ุชุณุชุฎุฏู ููุงุฉ (Kernel) ุตุบูุฑุฉ ูุชุทุจูู ุชุฃุซูุฑุงุช ูุซู ุงูุชูุนูู (Blur) ุฃู ุงูุชุนุฒูุฒ (Sharpen) ุฃู ูุดู ุงูุญูุงู. ูููู ุงูุชุญูู ุจุญุฌู ุงูููุงุฉ ูููุน ุงูููุชุฑ.<br>ูุงุฑู ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุงูุตูุฑุฉ ุจุนุฏ ุชุทุจูู ุงูููุชุฑ.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        filter_type = st.selectbox("ุงุฎุชุฑ ููุน ุงูููุชุฑ:", ("Gaussian Blur", "Median Blur", "Bilateral Filter"))

        if st.button("ุชุทุจูู"):
            if filter_type == "Gaussian Blur":
                # ุชุทุจูู ููุชุฑ Gaussian Blur
                img_filtered = cv2.GaussianBlur(img_bgr, (15, 15), 0)
                st.image(img_filtered, caption="ุจุนุฏ ุงูุนูููุฉ (Gaussian Blur)", use_column_width=True)
            elif filter_type == "Median Blur":
                # ุชุทุจูู ููุชุฑ Median Blur
                img_filtered = cv2.medianBlur(img_bgr, 15)
                st.image(img_filtered, caption="ุจุนุฏ ุงูุนูููุฉ (Median Blur)", use_column_width=True)
            else:
                # ุชุทุจูู ููุชุฑ Bilateral Filter
                img_filtered = cv2.bilateralFilter(img_bgr, 15, 75, 75)
                st.image(img_filtered, caption="ุจุนุฏ ุงูุนูููุฉ (Bilateral Filter)", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 5: ุฅุฒุงูุฉ ุงูุถูุถุงุก

elif selected == "ุฅุฒุงูุฉ ุงูุถูุถุงุก":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุฅุฒุงูุฉ ุงูุถูุถุงุก (Denoising)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูุถูุถุงุก ูุซู Salt & Pepper ุฃู Gaussian Noise ุชุคุซุฑ ุนูู ุฌูุฏุฉ ุงูุตูุฑ. ูููู ุฅุถุงูุฉ ุถูุถุงุก ููุตูุฑุฉ ูุงุณุชุฎุฏุงู ููุงุชุฑ ูุซู Median ุฃู Bilateral ูุฅุฒุงูุชูุง.<br>ูุงุฑู ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุงูุตูุฑุฉ ุจุนุฏ ุฅุฒุงูุฉ ุงูุถูุถุงุก.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        # ุฒุฑ ูุฅุถุงูุฉ ุถูุถุงุก ููุตูุฑุฉ
        if st.button("ุฅุถุงูุฉ ุถูุถุงุก"):
            # ุฅุถุงูุฉ ุถูุถุงุก Salt & Pepper
            noise_img = img_bgr.copy()
            cv2.randu(noise_img, 0, 255)
            noise_img = cv2.addWeighted(img_bgr, 0.8, noise_img, 0.2, 0)
            st.image(noise_img, caption="ุจุนุฏ ุฅุถุงูุฉ ุงูุถูุถุงุก", use_column_width=True)

        # ุฎูุงุฑุงุช ุฅุฒุงูุฉ ุงูุถูุถุงุก
        denoise_method = st.selectbox("ุงุฎุชุฑ ุทุฑููุฉ ุฅุฒุงูุฉ ุงูุถูุถุงุก:", ("Median Filtering", "Bilateral Filtering"))

        if st.button("ุชุทุจูู"):
            if denoise_method == "Median Filtering":
                # ุชุทุจูู Median Filtering
                img_denoised = cv2.medianBlur(img_bgr, 5)
                st.image(img_denoised, caption="ุจุนุฏ ุฅุฒุงูุฉ ุงูุถูุถุงุก ุจุงุณุชุฎุฏุงู Median Filtering", use_column_width=True)
            else:
                # ุชุทุจูู Bilateral Filtering
                img_denoised = cv2.bilateralFilter(img_bgr, 9, 75, 75)
                st.image(img_denoised, caption="ุจุนุฏ ุฅุฒุงูุฉ ุงูุถูุถุงุก ุจุงุณุชุฎุฏุงู Bilateral Filtering", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 6: ูุดู ุงูุญูุงู

elif selected == "ูุดู ุงูุญูุงู":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ูุดู ุงูุญูุงู (Edge Detection)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ูุดู ุงูุญูุงู ูุญุฏุฏ ุงูุญุฏูุฏ ุจูู ุงูุฃุฌุณุงู ูู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู ุฎูุงุฑุฒููุงุช ูุซู Sobel ูLaplacian ูCanny. ูููู ุงูุชุญูู ุจุงูุนุชุจุงุช ูู Canny.<br>ุดุงูุฏ ุงููุฑู ุจูู ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุตูุฑุฉ ุงูุญูุงู.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        # ุฎูุงุฑุงุช ูุดู ุงูุญูุงู
        edge_detection_method = st.selectbox("ุงุฎุชุฑ ุทุฑููุฉ ูุดู ุงูุญูุงู:", ("Sobel", "Laplacian", "Canny"))

        if st.button("ุชุทุจูู"):
            if edge_detection_method == "Sobel":
                # ุชุทุจูู ุฎูุงุฑุฒููุฉ Sobel
                sobelx = cv2.Sobel(img_bgr, cv2.CV_64F, 1, 0, ksize=5)
                sobely = cv2.Sobel(img_bgr, cv2.CV_64F, 0, 1, ksize=5)
                img_edges = cv2.magnitude(sobelx, sobely)
                st.image(img_edges, caption="ุจุนุฏ ุชุทุจูู Sobel", use_column_width=True, channels="GRAY")
            elif edge_detection_method == "Laplacian":
                # ุชุทุจูู ุฎูุงุฑุฒููุฉ Laplacian
                img_edges = cv2.Laplacian(img_bgr, cv2.CV_64F)
                st.image(img_edges, caption="ุจุนุฏ ุชุทุจูู Laplacian", use_column_width=True, channels="GRAY")
            else:
                # ุชุทุจูู ุฎูุงุฑุฒููุฉ Canny
                lower_threshold = st.slider("ุงูุนุชุจุฉ ุงูุณููู ููุดู ุงูุญูุงู:", 0, 255, 100)
                upper_threshold = st.slider("ุงูุนุชุจุฉ ุงูุนููุง ููุดู ุงูุญูุงู:", 0, 255, 200)
                img_edges = cv2.Canny(img_bgr, lower_threshold, upper_threshold)
                st.image(img_edges, caption="ุจุนุฏ ุชุทุจูู Canny Edge Detection", use_column_width=True, channels="GRAY")
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 7: ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ

elif selected == "ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ (Morphological Operations)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ ูุซู ุงูุชุขูู ูุงูุชูุณูุน ูุงููุชุญ ูุงูุฅุบูุงู ุชูุณุชุฎุฏู ููุนุงูุฌุฉ ุงูุตูุฑ ุงูุซูุงุฆูุฉ ูุชุญุณูููุง.<br>ููููู ุงูุชุญูู ุจุญุฌู ุงูููุงุฉ ูููุงุฑูุฉ ุงููุชุงุฆุฌ ูุน ุงูุฃุตู.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        # ุฎูุงุฑุงุช ุงูุนูููุงุช ุงูููุฑููููุฌูุฉ
        morph_operation = st.selectbox("ุงุฎุชุฑ ุงูุนูููุฉ ุงูููุฑููููุฌูุฉ:", ("Erosion", "Dilation", "Opening", "Closing"))

        if st.button("ุชุทุจูู"):
            if morph_operation == "Erosion":
                # ุชุทุจูู ุนูููุฉ ุงูุชุขูู
                kernel_size = st.slider("ุงุฎุชุฑ ุญุฌู ุงูููุงุฉ:", 1, 20, 5)
                kernel = np.ones((kernel_size, kernel_size), np.uint8)
                img_morphed = cv2.erode(img_bgr, kernel, iterations=1)
                st.image(img_morphed, caption="ุจุนุฏ ุชุทุจูู ุงูุชุขูู", use_column_width=True)
            elif morph_operation == "Dilation":
                # ุชุทุจูู ุนูููุฉ ุงูุชูุณูุน
                kernel_size = st.slider("ุงุฎุชุฑ ุญุฌู ุงูููุงุฉ:", 1, 20, 5)
                kernel = np.ones((kernel_size, kernel_size), np.uint8)
                img_morphed = cv2.dilate(img_bgr, kernel, iterations=1)
                st.image(img_morphed, caption="ุจุนุฏ ุชุทุจูู ุงูุชูุณูุน", use_column_width=True)
            elif morph_operation == "Opening":
                # ุชุทุจูู ุนูููุฉ ุงููุชุญ
                kernel_size = st.slider("ุงุฎุชุฑ ุญุฌู ุงูููุงุฉ:", 1, 20, 5)
                kernel = np.ones((kernel_size, kernel_size), np.uint8)
                img_morphed = cv2.morphologyEx(img_bgr, cv2.MORPH_OPEN, kernel)
                st.image(img_morphed, caption="ุจุนุฏ ุชุทุจูู ุงููุชุญ", use_column_width=True)
            else:
                # ุชุทุจูู ุนูููุฉ ุงูุฅุบูุงู
                kernel_size = st.slider("ุงุฎุชุฑ ุญุฌู ุงูููุงุฉ:", 1, 20, 5)
                kernel = np.ones((kernel_size, kernel_size), np.uint8)
                img_morphed = cv2.morphologyEx(img_bgr, cv2.MORPH_CLOSE, kernel)
                st.image(img_morphed, caption="ุจุนุฏ ุชุทุจูู ุงูุฅุบูุงู", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 8: ุงูุชุญูููุงุช ุงูููุฏุณูุฉ

elif selected == "ุงูุชุญูููุงุช ุงูููุฏุณูุฉ":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุงูุชุญูููุงุช ุงูููุฏุณูุฉ (Geometric Transforms)")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ุงูุชุญูููุงุช ุงูููุฏุณูุฉ ุชุดูู ุชุฏููุฑ ุงูุตูุฑุฉุ ุชูุจูุฑูุง ุฃู ุชุตุบูุฑูุงุ ุงูุนูุงุณูุง ุฃูููุงู ุฃู ุฑุฃุณูุงูุ ููุต ุฌุฒุก ูููุง.<br>ุฌุฑุจ ุงูุชุญูู ูู ูุฐู ุงูุนูููุงุช ูุดุงูุฏ ุงููุฑู.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        # ุฎูุงุฑุงุช ุงูุชุญูููุงุช ุงูููุฏุณูุฉ
        transform_type = st.selectbox("ุงุฎุชุฑ ููุน ุงูุชุญููู:", ("Rotation", "Scaling", "Translation", "Flipping"))

        if st.button("ุชุทุจูู"):
            if transform_type == "Rotation":
                angle = st.slider("ุงุฎุชุฑ ุฒุงููุฉ ุงูุชุฏููุฑ (ุจุงูุฏุฑุฌุงุช):", 0, 360, 90)
                (h, w) = img_bgr.shape[:2]
                center = (w // 2, h // 2)
                M = cv2.getRotationMatrix2D(center, angle, 1.0)
                img_transformed = cv2.warpAffine(img_bgr, M, (w, h))
                st.image(img_transformed, caption="ุจุนุฏ ุงูุชุฏููุฑ", use_column_width=True)
            elif transform_type == "Scaling":
                scale_percent = st.slider("ูุณุจุฉ ุงูุชูุจูุฑ/ุงูุชุตุบูุฑ (%):", 10, 300, 100)
                width = int(img_bgr.shape[1] * (scale_percent / 100))
                height = int(img_bgr.shape[0] * (scale_percent / 100))
                img_transformed = cv2.resize(img_bgr, (width, height), interpolation=cv2.INTER_LINEAR)
                st.image(img_transformed, caption="ุจุนุฏ ุงูุชูุจูุฑ/ุงูุชุตุบูุฑ", use_column_width=True)
            elif transform_type == "Translation":
                x_shift = st.slider("ุงูุชุญููู ุงูุฃููู (ุจูุณู):", -100, 100, 0)
                y_shift = st.slider("ุงูุชุญููู ุงูุฑุฃุณู (ุจูุณู):", -100, 100, 0)
                M = np.float32([[1, 0, x_shift], [0, 1, y_shift]])
                img_transformed = cv2.warpAffine(img_bgr, M, (img_bgr.shape[1], img_bgr.shape[0]))
                st.image(img_transformed, caption="ุจุนุฏ ุงูุชุญููู", use_column_width=True)
            else:
                # Flipping
                flip_direction = st.selectbox("ุงุฎุชุฑ ุงุชุฌุงู ุงูุงูุนูุงุณ:", ("ุฃููู", "ุฑุฃุณู"))
                if flip_direction == "ุฃููู":
                    img_transformed = cv2.flip(img_bgr, 1)
                else:
                    img_transformed = cv2.flip(img_bgr, 0)
                st.image(img_transformed, caption="ุจุนุฏ ุงูุงูุนูุงุณ", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุงููุญุฏุฉ 9: ุงููุนุงูุฌุฉ ุงููุจุงุดุฑุฉ ุจุงููุงููุฑุง

elif selected == "ุงููุนุงูุฌุฉ ุงููุจุงุดุฑุฉ ุจุงููุงููุฑุง":
    st.header("ุงููุนุงูุฌุฉ ุงููุจุงุดุฑุฉ ุจุงููุงููุฑุง")
    st.info("ุดุบู ุงููุงููุฑุง ูุทุจู ุงููุนุงูุฌุฉ ุนูู ุงูุจุซ ุงููุจุงุดุฑ.")
    
    # ุฒุฑ ูุชุดุบูู ุงููุงููุฑุง
    if st.button("ุชุดุบูู ุงููุงููุฑุง"):
        # ุฅุนุฏุงุฏ ุงููุงููุฑุง
        cap = cv2.VideoCapture(0)

        # ุงูุชุญูู ูู ูุชุญ ุงููุงููุฑุง ุจูุฌุงุญ
        if not cap.isOpened():
            st.error("ูุดู ูุชุญ ุงููุงููุฑุง.")
        else:
            st.success("ุงููุงููุฑุง ุชุนูู. ุงุถุบุท 'q' ูุฅููุงู ุงูุจุซ.")

            # ูุฑุงุกุฉ ูุฅุธูุงุฑ ุงูููุฏูู ุงููุจุงุดุฑ
            while True:
                ret, frame = cap.read()
                if not ret:
                    st.error("ูุดู ูู ูุฑุงุกุฉ ุงูุฅุทุงุฑ ูู ุงููุงููุฑุง.")
                    break

                # ุชุญููู ุงูุฅุทุงุฑ ุฅูู RGB
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

                # ุนุฑุถ ุงูุฅุทุงุฑ
                st.image(frame_rgb, channels="RGB", use_column_width=True)

                # ูุณุฑ ุงูุญููุฉ ุนูุฏ ุงูุถุบุท ุนูู 'q'
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        # ุชุญุฑูุฑ ุงููุงููุฑุง
        cap.release()
        cv2.destroyAllWindows()

# ุงููุญุฏุฉ 10: ุงููุดุฑูุน ุงูุฎุชุงูู

elif selected == "ุงููุดุฑูุน ุงูุฎุชุงูู":
    st.markdown(interactive_message, unsafe_allow_html=True)
    st.header("ุงููุดุฑูุน ุงูุฎุชุงูู: ุณูุณูุฉ ุนูููุงุช ูุนุงูุฌุฉ ุงูุตูุฑ")
    st.markdown("""
    <div style='background:#e3f2fd;border-radius:8px;padding:10px 16px;margin-bottom:10px;color:#222;'>
    ูู ุงููุดุฑูุน ุงูุฎุชุงูู ููููู ุฑูุน ุตูุฑุฉ ูุงุฎุชูุงุฑ ุณูุณูุฉ ูู ุงูุนูููุงุช (Pipeline) ูุซู ุชุญููู ุฅูู ุฑูุงุฏู ุซู ุชุทุจูู Blur ุซู ูุดู ุงูุญูุงู.<br>ุดุงูุฏ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ ููุงุฑููุง ูุน ุงูุฃุตูุ ูููููู ุญูุธ ุงูุตูุฑุฉ ุงููุงุชุฌุฉ.
    </div>
    """, unsafe_allow_html=True)
    # ุชุฌุฑุจุฉ ุนูููุฉ ููุญุฏุฉ: ุฑูุน ุตูุฑุฉ ุฃู ุงุณุชุฎุฏุงู ุตูุฑุฉ ุฌุงูุฒุฉุ ุชุทุจูู ุงูุนูููุฉุ ุนุฑุถ ูุจู/ุจุนุฏ

    def get_image():
        uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.session_state['uploaded_image'] = image
                st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")
        elif st.button("ุงุณุชุฎุฏู ุตูุฑุฉ ุงูุชุฑุงุถูุฉ"):
            image = Image.open("default.jpg") if os.path.exists("default.jpg") else Image.new('RGB', (256,256), (200,200,200))
            st.session_state['uploaded_image'] = image
            st.info("ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ ุงูุชุฑุงุถูุฉ.")
        return st.session_state.get('uploaded_image', None)

    # ุชุทุจูู ุงูุชุฌุฑุจุฉ ุงูุนูููุฉ
    image = get_image()
    if image is not None:
        st.image(image, caption="ูุจู ุงูุนูููุฉ", use_column_width=True)
        img_bgr = pil_to_bgr(image)
        # ุฎูุงุฑุงุช ุงููุดุฑูุน ุงูุฎุชุงูู
        st.subheader("ุงุฎุชุฑ ุงูุนูููุงุช ุงูุชู ุชุฑูุฏ ุชุทุจูููุง:")
        operations = []
        if st.checkbox("ุชุญููู ุฅูู ุฑูุงุฏู"):
            operations.append("Grayscale")
        if st.checkbox("ุชุนุฏูู ุงูุณุทูุน ูุงูุชุจุงูู"):
            operations.append("Brightness/Contrast")
        if st.checkbox("ุชุทุจูู Gaussian Blur"):
            operations.append("Gaussian Blur")
        if st.checkbox("ูุดู ุงูุญูุงู ุจุงุณุชุฎุฏุงู Canny"):
            operations.append("Canny Edge Detection")

        if st.button("ุชุทุจูู ุงูุนูููุงุช"):
            img_final = img_bgr.copy()

            for op in operations:
                if op == "Grayscale":
                    img_final = cv2.cvtColor(img_final, cv2.COLOR_BGR2GRAY)
                elif op == "Brightness/Contrast":
                    img_final = cv2.convertScaleAbs(img_final, alpha=1.2, beta=30)
                elif op == "Gaussian Blur":
                    img_final = cv2.GaussianBlur(img_final, (15, 15), 0)
                elif op == "Canny Edge Detection":
                    img_final = cv2.Canny(img_final, 100, 200)

            st.image(img_final, caption="ุจุนุฏ ุชุทุจูู ุงูุนูููุงุช", use_column_width=True)
    else:
        st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃู ุงุฎุชูุงุฑ ุตูุฑุฉ ุฌุงูุฒุฉ ูุชุฌุฑุจุฉ ุงูุนูููุฉ.")

# ุตูุญุฉ ุญูู ุงูุชุทุจูู
elif selected == "ุญูู ุงูุชุทุจูู":
    st.header("ุญูู ุงูุชุทุจูู")
    st.success("ุชุทุจูู ุชูุงุนูู ููุนุงูุฌุฉ ุงูุตูุฑ ููุฏู ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ูุชูุญ ูู ุชุฌุฑุจุฉ ุชูููุงุช ูุนุงูุฌุฉ ุงูุตูุฑ ุจุณูููุฉ. ุฌููุน ุงูุญููู ูุญููุธุฉ ยฉ 2025.")
    st.markdown("""
    <ul>
        <li>ุงููุทูุฑ: GitHub Copilot</li>
        <li>ููุชูุงุตู: mjlo@example.com</li>
        <li>ุงูุฅุตุฏุงุฑ: 1.0</li>
        <li>ุฌููุน ุงูุญููู ูุญููุธุฉ</li>
    </ul>
    """, unsafe_allow_html=True)

# ุฅุถุงูุฉ CSS ูุถูุงู ุฃู ุฌููุน ุงููุตูุต ุชุธูุฑ ุจุงูููู ุงูุฃุณูุฏ ูู ูู ุนูุงุตุฑ Streamlit
st.markdown("""
    <style>
    body, .stApp, .stMarkdown, .stHeader, .stText, .stInfo, .stAlert, .stNotificationContent, .stSuccess, .stWarning, .stError, .stSidebar, .stButton, .stRadio, .stSelectbox, .stExpander, .stFileUploader, .stSlider, .stTextInput, .stTextArea {
        color: #111 !important;
        font-family: 'Cairo', 'Tajawal', sans-serif !important;
    }
    .stNotificationContent, .stAlert, .stInfo, .stSuccess, .stWarning, .stError {
        background: #e3f2fd !important;
        color: #111 !important;
    }
    .stButton>button, .stSidebar .stButton>button {
        color: #111 !important;
        font-weight: bold;
        background: linear-gradient(90deg,#aeea00,#00bfae);
        border-radius: 8px;
        border: none;
        box-shadow: 0 2px 8px #0001;
    }
    .stFileUploader label, .stFileUploader .uploadedFileName {
        color: #111 !important;
    }
    .stExpanderHeader {
        color: #111 !important;
    }
    .stRadio label, .stSelectbox label {
        color: #111 !important;
    }
    </style>
""", unsafe_allow_html=True)

# ุชุนุฑูู ุฏุงูุฉ pil_to_bgr ูู ุฃุนูู ุงูููู ูุญู ุฌููุน ุฃุฎุทุงุก ุงูุชุนุฑูู

def pil_to_bgr(img_pil):
    import numpy as np
    import cv2
    img_rgb = np.array(img_pil.convert('RGB'))
    img_bgr = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2BGR)
    return img_bgr

# ุฅุตูุงุญ ูุดุงูู ุฑูุน ุงูุตูุฑ ูุชุทุจูู ุงูููุงุชุฑ
# ุงูุชุฃูุฏ ูู ุฃู ุฑูุน ุงูุตูุฑุฉ ูุนูู ุจุดูู ุตุญูุญ
if 'uploaded_image' not in st.session_state:
    st.session_state['uploaded_image'] = None

uploaded_file = st.file_uploader("ุฑูุน ุตูุฑุฉ", type=["jpg", "jpeg", "png"])
if uploaded_file is not None:
    try:
        image = Image.open(uploaded_file)
        st.session_state['uploaded_image'] = image
        st.success("ุชู ุฑูุน ุงูุตูุฑุฉ ุจูุฌุงุญ!")
    except Exception as e:
        st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฑูุน ุงูุตูุฑุฉ: {e}")

# ุงูุชุฃูุฏ ูู ุฃู ุชุทุจูู ุงูููุงุชุฑ ูุง ูุณุจุจ ุฃุฎุทุงุก ุฅุฐุง ูู ุชูุฌุฏ ุตูุฑุฉ
if st.session_state['uploaded_image'] is not None:
    image = st.session_state['uploaded_image']
    st.image(image, caption="ุงูุตูุฑุฉ ุงูุฃุตููุฉ", use_column_width=True)
    # ูุซุงู: ุชุทุจูู ููุชุฑ Blur
    if st.button("ุชุทุจูู Blur"):
        try:
            img_np = np.array(image)
            img_blur = cv2.GaussianBlur(img_np, (7,7), 0)
            st.image(img_blur, caption="ุจุนุฏ ุชุทุจูู Blur", use_column_width=True)
        except Exception as e:
            st.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุทุจูู ุงูููุชุฑ: {e}")
else:
    st.info("ูุฑุฌู ุฑูุน ุตูุฑุฉ ุฃููุงู ูุชุฌุฑุจุฉ ุงูููุงุชุฑ.")

# ุฅุตูุงุญ ูุดุงูู ุงูููุงุชุฑ ูุชุญููู ุงูุตูุฑ ุจูู PIL ูOpenCV ุจุดูู ุตุญูุญ
# ุฏุงูุฉ ูุชุญููู ุตูุฑุฉ PIL ุฅูู NumPy ุจุตูุบุฉ BGR ูุงุณุชุฎุฏุงู OpenCV

def pil_to_bgr(img_pil):
    import numpy as np
    import cv2
    img_rgb = np.array(img_pil.convert('RGB'))
    img_bgr = cv2.cvtColor(img_rgb, cv2.COLOR_RGB2BGR)
    return img_bgr

# ุฏุงูุฉ ูุชุญููู ุตูุฑุฉ NumPy BGR ุฅูู PIL

def bgr_to_pil(img_bgr):
    img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    return Image.fromarray(img_rgb)

# ูุซุงู ุงุณุชุฎุฏุงู ูู ูุญุฏุฉ ุฃูุธูุฉ ุงูุฃููุงู
if selected == "ุฃูุธูุฉ ุงูุฃููุงู" and st.session_state['uploaded_image'] is not None:
    image = st.session_state['uploaded_image']
    img_bgr = pil_to_bgr(image)
    st.image(image, caption="ุงูุตูุฑุฉ ุงูุฃุตููุฉ", use_column_width=True)
    if st.button("ุชุญููู ุฅูู HSV"):
        try:
            img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)
            img_hsv_rgb = cv2.cvtColor(img_hsv, cv2.COLOR_HSV2RGB)
            st.image(img_hsv_rgb, caption="ุตูุฑุฉ HSV", use_column_width=True)
        except Exception as e:
            st.error(f"ุฎุทุฃ ูู ุงูุชุญููู: {e}")